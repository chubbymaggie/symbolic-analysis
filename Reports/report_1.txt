After Globals are also added to the mayNot and mustAlais lists:
Test 			native 		jit 	lli		zesti Concrete w/o checks 	zesti concrete w checks 	With H1, H2
======================================================================================================================================================
Standford/IntMM		0.0010		0.0150	2.1117		4.019s				0m21.214s (35891724/ 1281557)	0m20.237   (35840884 /10)
Stanford/Quicksort	0.0410		0.0510	24.3813		39.883s				2m40.586s (220229298/ 8808547)	2m38.585s (220222895 / 10 )
Stanford/Bubblesort	0.0460		0.0600	35.7216		59.707s		 		4m3.567s ( 313184298 /12526747)	4m0.929s  (313130660/10)
aha			2.1037		2.2307	55.78257m	106m27.300s			731m50.958s	








Test 			native 		jit 	lli		zesti Concrete w/o checks 	zesti concrete w checks 	With H1, H2, H3
======================================================================================================================================================
Standford/IntMM		0.0010		0.0150	2.1117		4.019s				8.23 (12905034/ 1281592)	7.69 (12800409 /9)
Stanford/Quicksort	0.0410		0.0510	24.3813		39.883s				48.32 (105824/ 8808582)		45.46 (1199 / 9 )
Stanford/Queens		0.0370		0.0520	20.0360		38.840s				48.62 ( 869924 / 8361582)	47.04 ( 299/ 5009)
Stanford/Perm		0.0220		0.0380	21.2618		47.751s				57.04 (104924  /10079582)	56.18 (299/9)
Stanford/Bubblesort	0.0460		0.0600	35.7216		59.707s		 		114.41 ( 37680524 /12526782)	106.11 (37575899/9)
aha			2.1037		2.2307	55.78257m	106m27.300s			731m50.958s	





				native_run_time         	jit_time  	lli_time        	klee_concrete_run_w/o_checks		klee_concrete_run_w_checks
                              -------------------------------------------------------------------------------------------------------------------
./aha/Makefile                	2.1037                  	2.2307    	3346.9542 [2001281667]  106m27.300s [12141488820]+13867		731m50.958s		
                                                                 (55.78257m)                 (X2)
                                                                                            113m46.966s [12032820792]  (div by zero removed, 
										invound checking removed but getelement ptr is there)
                                                                                            97 m (div by zero removed, invound checking removed but getelement ptr is NOT there)

-------------------------------------------------------------------------------------------------------------------------------
./lambda-0.1.3/Makefile       5.5102                  7.1659    5116.4352 (85.27392m)       268m48.679s (X 3 )
-------------------------------------------------------------------------------------------------------------------------------
./ALAC/encode/Makefile        0.0260                  0.2430    43.1754s                     2787m24.084s (X 3888) !!!!!      
                                                                63.8950s                         87.57s
                                                                                              108
==================================================================
==================================================================
==================================================================

./Stanford/IntMM              0.0010                0.0150      2.1117 [6228881]          0m4.019s [7814881] + 4777                          6m32.979s/343.02 (with places of checker calls changed)/325s (with cached)
----------------------------------------------------------------------------------------------------------------------------------------------------------
./Stanford/RealMM             0.0020                0.0140      1.9787 [6292881]         5.406s [7878881] + 4777                              6m27.876s
                                                                   rem div_by_zero       5.090s   7654881
                                                                     7654881 -  6292881 = 1362000 (phi instructions)                   
After regToMem: 20880179 lli to 20190969                         11m       [20880179]       24m [20190969] (createCFGSimplificationPass)
rem div checks and inbopund :                                                              0m4.847s
getelm: 1328010
//KLEE: 1 seeds remaining over: 1 states; 0 sec. add constaint time after 130386 constrains (0 actual)
----------------------------------------------------------------------------------------------------------------------------------------------------------
./Stanford/Puzzle             0.1500                0.1860      188.5333 [697819703]       5m39.421s [800104702]+15980177

./Stanford/Quicksort          0.0410                0.0510      24.3813[82326102]         0m39.883s [117933202]+4777                        79m54.503s /69.77m (with places of checker calls changed)/69.09m chaced
./Stanford/Queens             0.0370                0.0520      20.0360[79715526]         0m38.840s [88560616]+4777                         81m59.687s
./Stanford/Bubblesort         0.0460                0.0600      35.7216                   0m59.707s                                         116m32.329s
./Stanford/Perm               0.0220                0.0380      21.2618                   0m47.751s                                         127m34.294s

./Stanford/Towers             0.0150                0.0040      29.2296                   0m50.715s

Not interesting:
./Shootout/nestedloop         0.1600                0.1645      3m34.240s        3m58.411s                         4m5.165s
./Shootout/ackermann          0.0050                0.0140      5.6351 [16713961]          0m5.833s [22287999]+4777                         0m6.500s

*In both the klee_concrete_run_w/o_checks & klee_concrete_run_w_checks runs made sure that the symbolic runs should not kick in. 

Why the difference between klee_concrete_run_w/o_checks & klee_concrete_run_w_checks is not seen in some cases?
Whats makes klee_concrete_run_w/o_checks dominate lli time?

Effect of having uclibc
--libc=uclibc --allow-external-sym-calls

time lli -info-output-file=/home/sdasgup3/Documents/llvmpa/llvmpa.tests/klee-test-suite.obj/SingleSource/Benchmarks/Stanford/Output/RealMM.out-lli.info -stats -time-passes -force-interpreter=true --disable-core-files  Output/RealMM.llvm.bc

time /home/sdasgup3/Documents/klee-zesti/zesti.obj/Release+Asserts/bin/klee --zest --use-symbex=2 --symbex-for=10 --search=zest --libc=uclibc --allow-external-sym-calls  --zest-search-heuristic=br  --zest-discard-far-states=false --use-query-log=all:pc  --use-query-log=solver:pc  Output/RealMM.llvm.bc
time klee --zest --use-symbex=2 --symbex-for=10 --search=zest    --zest-search-heuristic=br  --zest-discard-far-states=false --check-div-zero=false  Output/RealMM.llvm.bc

KLEE: 1 seeds remaining over: 1 states; 0 sec. add constaint time after 161555879 constrains (0 actual)
77
2005
77
2005
77
2005
77
2005
KLEE: 1 seeds remaining over: 1 states; 0 sec. add constaint time after 166935890 constrains (0 actual)

+4777 for uclibc
KLEE: ERROR: external call with symbolic argument: printf


Interpreter::SwitchToNewBasicBlock
// SwitchToNewBasicBlock - This method is used to jump to a new basic block.
// This function handles the actual updating of block and instruction iterators
// as well as execution of all of the PHI nodes in the destination block.
//
// This method does this because all of the PHI nodes must be executed
// atomically, reading their inputs before any of the results are updated.  Not
// doing this can cause problems if the PHI nodes depend on other PHI nodes for
// their inputs.  If the input PHI node is updated before it is read, incorrect
// results can happen.  Thus we use a two phase approach.
//
void Interpreter::SwitchToNewBasicBlock(BasicBlock *Dest, ExecutionContext &SF){
  BasicBlock *PrevBB = SF.CurBB;      // Remember where we came from...
  SF.CurBB   = Dest;                  // Update CurBB to branch destination
  SF.CurInst = SF.CurBB->begin();     // Update new instruction ptr...

  if (!isa<PHINode>(SF.CurInst)) return;  // Nothing fancy to do

  // Loop over all of the PHI nodes in the current block, reading their inputs.
  std::vector<GenericValue> ResultValues;

  for (; PHINode *PN = dyn_cast<PHINode>(SF.CurInst); ++SF.CurInst) {
    // Search for the value corresponding to this previous bb...
    int i = PN->getBasicBlockIndex(PrevBB);
    assert(i != -1 && "PHINode doesn't contain entry for predecessor??");
    Value *IncomingValue = PN->getIncomingValue(i);

    // Save the incoming value for this PHI node...
    ResultValues.push_back(getOperandValue(IncomingValue, SF));
  }

  // Now loop over all of the PHI nodes setting their values...
  SF.CurInst = SF.CurBB->begin();
  for (unsigned i = 0; isa<PHINode>(SF.CurInst); ++SF.CurInst, ++i) {
    PHINode *PN = cast<PHINode>(SF.CurInst);
    SetValue(PN, ResultValues[i], SF);
  }
}
PHIElimination
KLEE: done: total instructions = 26
KLEE: done: completed paths = 2
KLEE: done: generated tests = 2

for (ConstraintManager::constraint_iterator it = state.constraints.begin(), ite = state.constraints.end();
          it != ite; ++it) {
    findReads(*it, false, reads2);
    reads.insert(reads.end(), reads2.begin(), reads2.end());
  }


lli erros:
LLVM ERROR: Calling external var arg function 'qsort' is not supported by the Interpreter.
LLVM ERROR: Code generator does not support intrinsic function 'llvm.umul.with.overflow.i64'!
LLVM ERROR: Could not resolve external global address: __dso_handle
crases


Planning to do thsi week:
Analyse the report.
Implement the strategy of skipping Phi s while interpreting. [ lli while interpreting, evaluates all the Phi instructions while interpreting Instruction::Br. While klee interprets them individually.]
Test with removing all load/store inbounds checks. [Last week tested the effect of removing loads preceded by gptr, where we are adding the constraints explicitly . ]
Even if we do the above the overhead of constraint adding during gptr need to be measured.


LLVM ERROR: Code generator does not support intrinsic function 'llvm.uadd.with.overflow.i32'!
